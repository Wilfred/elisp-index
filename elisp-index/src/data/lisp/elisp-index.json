{
  "calls": [
    {
      "end": 985,
      "start": 978,
      "name": "require"
    },
    {
      "end": 1001,
      "start": 994,
      "name": "require"
    },
    {
      "end": 1014,
      "start": 1007,
      "name": "require"
    },
    {
      "end": 1030,
      "start": 1023,
      "name": "require"
    },
    {
      "end": 1178,
      "start": 1169,
      "name": "goto-char"
    },
    {
      "end": 1189,
      "start": 1180,
      "name": "point-min"
    },
    {
      "end": 1273,
      "start": 1268,
      "name": "point"
    },
    {
      "end": 1306,
      "start": 1302,
      "name": "read"
    },
    {
      "end": 1368,
      "start": 1364,
      "name": "-map"
    },
    {
      "end": 1374,
      "start": 1371,
      "name": "car"
    },
    {
      "end": 1476,
      "start": 1454,
      "name": "elisp-index--fun-calls"
    },
    {
      "end": 1515,
      "start": 1510,
      "name": "-each"
    },
    {
      "end": 1623,
      "start": 1622,
      "name": "+"
    },
    {
      "end": 1679,
      "start": 1678,
      "name": "+"
    },
    {
      "end": 1697,
      "start": 1691,
      "name": "length"
    },
    {
      "end": 1710,
      "start": 1699,
      "name": "symbol-name"
    },
    {
      "end": 1751,
      "start": 1747,
      "name": "memq"
    },
    {
      "end": 1865,
      "start": 1854,
      "name": "symbol-name"
    },
    {
      "end": 1985,
      "start": 1983,
      "name": "1-"
    },
    {
      "end": 2032,
      "start": 2030,
      "name": "1-"
    },
    {
      "end": 2093,
      "start": 2088,
      "name": "error"
    },
    {
      "end": 2113,
      "start": 2108,
      "name": "equal"
    },
    {
      "end": 2118,
      "start": 2115,
      "name": "car"
    },
    {
      "end": 2160,
      "start": 2152,
      "name": "nreverse"
    },
    {
      "end": 2232,
      "start": 2227,
      "name": "error"
    },
    {
      "end": 2321,
      "start": 2305,
      "name": "buffer-file-name"
    },
    {
      "end": 2329,
      "start": 2324,
      "name": "point"
    },
    {
      "end": 2475,
      "start": 2466,
      "name": "goto-char"
    },
    {
      "end": 2486,
      "start": 2477,
      "name": "point-min"
    },
    {
      "end": 2551,
      "start": 2547,
      "name": "read"
    },
    {
      "end": 2575,
      "start": 2570,
      "name": "-each"
    },
    {
      "end": 2703,
      "start": 2692,
      "name": "symbol-name"
    },
    {
      "end": 2768,
      "start": 2763,
      "name": "error"
    },
    {
      "end": 2788,
      "start": 2783,
      "name": "equal"
    },
    {
      "end": 2793,
      "start": 2790,
      "name": "car"
    },
    {
      "end": 2835,
      "start": 2827,
      "name": "nreverse"
    },
    {
      "end": 2907,
      "start": 2902,
      "name": "error"
    },
    {
      "end": 2996,
      "start": 2980,
      "name": "buffer-file-name"
    },
    {
      "end": 3004,
      "start": 2999,
      "name": "point"
    },
    {
      "end": 3048,
      "start": 3025,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 3072,
      "start": 3069,
      "name": "not"
    },
    {
      "end": 3079,
      "start": 3074,
      "name": "consp"
    },
    {
      "end": 3103,
      "start": 3101,
      "name": "eq"
    },
    {
      "end": 3108,
      "start": 3105,
      "name": "car"
    },
    {
      "end": 3139,
      "start": 3137,
      "name": "or"
    },
    {
      "end": 3143,
      "start": 3141,
      "name": "eq"
    },
    {
      "end": 3148,
      "start": 3145,
      "name": "car"
    },
    {
      "end": 3174,
      "start": 3172,
      "name": "eq"
    },
    {
      "end": 3179,
      "start": 3176,
      "name": "car"
    },
    {
      "end": 3225,
      "start": 3197,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 3230,
      "start": 3227,
      "name": "cdr"
    },
    {
      "end": 3246,
      "start": 3244,
      "name": "eq"
    },
    {
      "end": 3251,
      "start": 3248,
      "name": "car"
    },
    {
      "end": 3285,
      "start": 3278,
      "name": "symbolp"
    },
    {
      "end": 3353,
      "start": 3350,
      "name": "cdr"
    },
    {
      "end": 3433,
      "start": 3410,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 3456,
      "start": 3454,
      "name": "eq"
    },
    {
      "end": 3461,
      "start": 3458,
      "name": "car"
    },
    {
      "end": 3510,
      "start": 3482,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 3532,
      "start": 3530,
      "name": "eq"
    },
    {
      "end": 3537,
      "start": 3534,
      "name": "car"
    },
    {
      "end": 3583,
      "start": 3560,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 3588,
      "start": 3585,
      "name": "nth"
    },
    {
      "end": 3607,
      "start": 3605,
      "name": "eq"
    },
    {
      "end": 3612,
      "start": 3609,
      "name": "car"
    },
    {
      "end": 3650,
      "start": 3647,
      "name": "cdr"
    },
    {
      "end": 3711,
      "start": 3683,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 3742,
      "start": 3740,
      "name": "eq"
    },
    {
      "end": 3747,
      "start": 3744,
      "name": "car"
    },
    {
      "end": 3792,
      "start": 3789,
      "name": "nth"
    },
    {
      "end": 3850,
      "start": 3844,
      "name": "append"
    },
    {
      "end": 3882,
      "start": 3859,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 3943,
      "start": 3915,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 3948,
      "start": 3945,
      "name": "cdr"
    },
    {
      "end": 3982,
      "start": 3980,
      "name": "or"
    },
    {
      "end": 3986,
      "start": 3984,
      "name": "eq"
    },
    {
      "end": 3991,
      "start": 3988,
      "name": "car"
    },
    {
      "end": 4015,
      "start": 4013,
      "name": "eq"
    },
    {
      "end": 4020,
      "start": 4017,
      "name": "car"
    },
    {
      "end": 4055,
      "start": 4052,
      "name": "nth"
    },
    {
      "end": 4108,
      "start": 4102,
      "name": "append"
    },
    {
      "end": 4146,
      "start": 4141,
      "name": "consp"
    },
    {
      "end": 4190,
      "start": 4162,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4195,
      "start": 4192,
      "name": "cdr"
    },
    {
      "end": 4252,
      "start": 4224,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4281,
      "start": 4277,
      "name": "cons"
    },
    {
      "end": 4291,
      "start": 4288,
      "name": "car"
    },
    {
      "end": 4315,
      "start": 4310,
      "name": "consp"
    },
    {
      "end": 4320,
      "start": 4317,
      "name": "cdr"
    },
    {
      "end": 4364,
      "start": 4336,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4369,
      "start": 4366,
      "name": "cdr"
    },
    {
      "end": 4462,
      "start": 4439,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 4669,
      "start": 4654,
      "name": "macroexpand-all"
    },
    {
      "end": 4720,
      "start": 4697,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 4951,
      "start": 4947,
      "name": "memq"
    },
    {
      "end": 5017,
      "start": 4990,
      "name": "elisp-index--definitions-in"
    },
    {
      "end": 5141,
      "start": 5138,
      "name": "not"
    },
    {
      "end": 5148,
      "start": 5143,
      "name": "consp"
    },
    {
      "end": 5172,
      "start": 5170,
      "name": "eq"
    },
    {
      "end": 5177,
      "start": 5174,
      "name": "car"
    },
    {
      "end": 5208,
      "start": 5206,
      "name": "eq"
    },
    {
      "end": 5213,
      "start": 5210,
      "name": "car"
    },
    {
      "end": 5258,
      "start": 5255,
      "name": "nth"
    },
    {
      "end": 5288,
      "start": 5285,
      "name": "nth"
    },
    {
      "end": 5318,
      "start": 5315,
      "name": "nth"
    },
    {
      "end": 5346,
      "start": 5342,
      "name": "cons"
    },
    {
      "end": 5379,
      "start": 5352,
      "name": "elisp-index--definitions-in"
    },
    {
      "end": 5398,
      "start": 5393,
      "name": "consp"
    },
    {
      "end": 5403,
      "start": 5400,
      "name": "cdr"
    },
    {
      "end": 5453,
      "start": 5426,
      "name": "elisp-index--definitions-in"
    },
    {
      "end": 5462,
      "start": 5459,
      "name": "cdr"
    },
    {
      "end": 5666,
      "start": 5657,
      "name": "goto-char"
    },
    {
      "end": 5677,
      "start": 5668,
      "name": "point-min"
    },
    {
      "end": 5755,
      "start": 5751,
      "name": "read"
    },
    {
      "end": 5796,
      "start": 5791,
      "name": "point"
    },
    {
      "end": 5840,
      "start": 5830,
      "name": "scan-sexps"
    },
    {
      "end": 5847,
      "start": 5842,
      "name": "point"
    },
    {
      "end": 5925,
      "start": 5898,
      "name": "elisp-index--definitions-in"
    },
    {
      "end": 5942,
      "start": 5927,
      "name": "macroexpand-all"
    },
    {
      "end": 6013,
      "start": 6002,
      "name": "symbol-name"
    },
    {
      "end": 6052,
      "start": 6050,
      "name": "1-"
    },
    {
      "end": 6096,
      "start": 6094,
      "name": "1-"
    },
    {
      "end": 6148,
      "start": 6143,
      "name": "error"
    },
    {
      "end": 6168,
      "start": 6163,
      "name": "equal"
    },
    {
      "end": 6173,
      "start": 6170,
      "name": "car"
    },
    {
      "end": 6215,
      "start": 6207,
      "name": "nreverse"
    },
    {
      "end": 6287,
      "start": 6282,
      "name": "error"
    },
    {
      "end": 6376,
      "start": 6360,
      "name": "buffer-file-name"
    },
    {
      "end": 6384,
      "start": 6379,
      "name": "point"
    },
    {
      "end": 6465,
      "start": 6447,
      "name": "find-file-noselect"
    },
    {
      "end": 6566,
      "start": 6553,
      "name": "buffer-string"
    },
    {
      "end": 6587,
      "start": 6576,
      "name": "json-encode"
    },
    {
      "end": 6622,
      "start": 6612,
      "name": "f-filename"
    },
    {
      "end": 6693,
      "start": 6671,
      "name": "elisp-index--functions"
    },
    {
      "end": 6745,
      "start": 6716,
      "name": "elisp-index--called-functions"
    },
    {
      "end": 6916,
      "start": 6906,
      "name": "f-filename"
    },
    {
      "end": 6965,
      "start": 6959,
      "name": "format"
    },
    {
      "end": 6992,
      "start": 6977,
      "name": "s-chop-suffixes"
    },
    {
      "end": 7033,
      "start": 7026,
      "name": "f-write"
    },
    {
      "end": 7059,
      "start": 7040,
      "name": "elisp-index--encode"
    },
    {
      "end": 7090,
      "start": 7084,
      "name": "f-join"
    },
    {
      "end": 7126,
      "start": 7121,
      "name": "princ"
    },
    {
      "end": 7134,
      "start": 7128,
      "name": "format"
    },
    {
      "end": 7155,
      "start": 7149,
      "name": "f-join"
    },
    {
      "end": 7198,
      "start": 7191,
      "name": "provide"
    }
  ],
  "functions": [
    {
      "end": 2341,
      "start": 1037,
      "name": "elisp-index--called-functions"
    },
    {
      "end": 3016,
      "start": 2343,
      "name": "elisp-index--symbols"
    },
    {
      "end": 4381,
      "start": 3018,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 4473,
      "start": 4383,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4981,
      "start": 4475,
      "name": "elisp-index--fun-calls"
    },
    {
      "end": 5472,
      "start": 4983,
      "name": "elisp-index--definitions-in"
    },
    {
      "end": 6396,
      "start": 5474,
      "name": "elisp-index--functions"
    },
    {
      "end": 6755,
      "start": 6398,
      "name": "elisp-index--encode"
    },
    {
      "end": 7188,
      "start": 6757,
      "name": "elisp-index--write"
    }
  ],
  "source": ";;; elisp-index.el --- Generate a list of all symbols in an elisp file  -*- lexical-binding: t; -*-\n\n;; Copyright (C) 2019  Wilfred Hughes\n;; Version: 0.1\n\n;; Author: Wilfred Hughes <me@wilfred.me.uk>\n;; Keywords: lisp\n;; Package-Requires: ((dash \"2.12.0\") (f \"0.19.0\") (ht \"2.2\") (s \"1.11.0\"))\n\n;; This program is free software; you can redistribute it and/or modify\n;; it under the terms of the GNU General Public License as published by\n;; the Free Software Foundation, either version 3 of the License, or\n;; (at your option) any later version.\n\n;; This program is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n;; GNU General Public License for more details.\n\n;; You should have received a copy of the GNU General Public License\n;; along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n;;; Commentary:\n\n;; TODO\n\n;;; Code:\n\n(require 'dash)\n(require 'f)\n(require 'json)\n(require 'ht)\n\n(defun elisp-index--called-functions (buf)\n  (let ((read-with-symbol-positions t)\n        syms)\n    (with-current-buffer buf\n      (goto-char (point-min))\n      (condition-case err\n          (while t\n            (let* ((start-pos (point))\n                   (form (read buf))\n                   (form-syms\n                    (-map #'car read-symbol-positions-list))\n                   (fun-syms\n                    (elisp-index--fun-calls form form-syms)))\n              (-each read-symbol-positions-list\n                (-lambda ((sym . offset))\n                  (let* ((start-pos (+ start-pos offset))\n                         (end-pos (+ start-pos (length (symbol-name sym)))))\n                    (when (memq sym fun-syms)\n                      (push\n                       (ht\n                        (\"name\" (symbol-name sym))\n                        ;; Subtract 1 because emacs positions are 1-indexed.\n                        (\"start\" (1- start-pos))\n                        (\"end\" (1- end-pos)))\n                       syms)))))))\n        (error\n         (if (equal (car err) 'end-of-file)\n             (nreverse syms)\n           ;; Some unexpected error, propagate.\n           (error \"Unexpected error whilst reading %s position %s: %s\"\n                  (buffer-file-name) (point) err)))))))\n\n(defun elisp-index--symbols (buf)\n  (let ((read-with-symbol-positions t)\n        syms)\n    (with-current-buffer buf\n      (goto-char (point-min))\n      (condition-case err\n          (while t\n            (read buf)\n            (-each read-symbol-positions-list\n              (-lambda ((sym . pos))\n                (push\n                 (ht (\"name\" (symbol-name sym)) (\"position\" pos))\n                 syms))))\n        (error\n         (if (equal (car err) 'end-of-file)\n             (nreverse syms)\n           ;; Some unexpected error, propagate.\n           (error \"Unexpected error whilst reading %s position %s: %s\"\n                  (buffer-file-name) (point) err)))))))\n\n(defun elisp-index--walk-calls (form)\n  (cond\n   ((not (consp form))\n    nil)\n   ((eq (car form) 'quote)\n    nil)\n   ((or (eq (car form) 'while)\n        (eq (car form) 'if))\n    (elisp-index--walk-calls-body (cdr form)))\n   ((eq (car form) 'function)\n    (if (symbolp (cadr form))\n        ;; For #'foo, assume it's a call.\n        (cdr form)\n      ;; For #'(lambda ...), just proceed.\n      (elisp-index--walk-calls (cadr form))))\n   ((eq (car form) 'lambda)\n    (elisp-index--walk-calls-body (cddr form)))\n   ((eq (car form) 'defalias)\n    (elisp-index--walk-calls (nth 2 form)))\n\n   ((eq (car form) 'cond)\n    (let* ((clauses (cdr form)))\n      (--mapcat\n       (elisp-index--walk-calls-body it)\n       clauses)))\n\n   ((eq (car form) 'condition-case)\n    (let* ((body (nth 2 form))\n           (clauses (cdddr form)))\n      (append\n       (elisp-index--walk-calls body)\n       (--mapcat\n        (elisp-index--walk-calls-body (cdr it))\n        clauses))))\n\n   ((or (eq (car form) 'let)\n        (eq (car form) 'let*))\n    (let ((head (nth 1 form))\n          (body (cddr form)))\n      (append\n       (--mapcat\n        (when (consp it)\n          (elisp-index--walk-calls-body (cdr it)))\n        head)\n       (elisp-index--walk-calls-body body))))\n   \n   (t\n    (cons\n     (car form)\n     (when (consp (cdr form))\n       (elisp-index--walk-calls-body (cdr form)))))))\n\n(defun elisp-index--walk-calls-body (body)\n  (--mapcat (elisp-index--walk-calls it) body))\n\n(defun elisp-index--fun-calls (form src-syms)\n  \"Return a list of all the functions called in FORM.\nIgnore function calls that are only introduced by macros.\"\n  (let* ((expanded (macroexpand-all form))\n         (fun-syms (elisp-index--walk-calls expanded)))\n    ;; All the function symbols that occurred in the source.\n    ;; TODO: this is confused by\n    ;; (condition-case nil nil (error (error \"F\")))\n    ;; and thinks there are two calls to error.\n    (--filter\n     (memq it src-syms)\n     fun-syms)))\n\n(defun elisp-index--definitions-in (form)\n  \"Return a list of all the functions defined in FORM.\nAssumes FORM has been fully macro expanded.\"\n  (cond\n   ((not (consp form))\n    nil)\n   ((eq (car form) 'quote)\n    nil)\n   ((eq (car form) 'defalias)\n    (let* ((quoted-sym (nth 1 form))\n           (def (nth 2 form))\n           (sym (nth 1 quoted-sym)))\n      (cons sym (elisp-index--definitions-in def))))\n   ((consp (cdr form))\n    (--mapcat (elisp-index--definitions-in it) (cdr form)))))\n\n(defun elisp-index--functions (buf)\n  \"Return a hashmap of all the functions defined in BUF.\"\n  (let ((read-with-symbol-positions t)\n        funs)\n    (with-current-buffer buf\n      (goto-char (point-min))\n      (condition-case err\n          (while t\n            (let* ((form (read buf))\n                   (end-pos (point))\n                   (start-pos (scan-sexps (point) -1))\n                   )\n              (--each (elisp-index--definitions-in (macroexpand-all form))\n                (push\n                 (ht (\"name\" (symbol-name it))\n                     (\"start\" (1- start-pos))\n                     (\"end\" (1- end-pos)))\n                 funs))))\n        (error\n         (if (equal (car err) 'end-of-file)\n             (nreverse funs)\n           ;; Some unexpected error, propagate.\n           (error \"Unexpected error whilst reading %s position %s: %s\"\n                  (buffer-file-name) (point) err)))))))\n\n(defun elisp-index--encode (path)\n  (let* ((buf (find-file-noselect path))\n         (json-encoding-pretty-print t)\n         (src (with-current-buffer buf (buffer-string))))\n    (json-encode\n     (ht\n      (\"name\" (f-filename path))\n      (\"source\" src)\n      (\"functions\" (elisp-index--functions buf))\n      (\"calls\" (elisp-index--called-functions buf))))))\n\n(defun elisp-index--write (path dest-dir)\n  \"Read the elisp at PATH, and write a copy of the file and JSON\nsummary to DEST-DIR.\"\n  (let* ((filename (f-filename path))\n         (json-filename\n          (format \"%s.json\" (s-chop-suffixes '(\".gz\" \".el\") filename))))\n    (f-write\n     (elisp-index--encode path)\n     'utf-8\n     (f-join dest-dir json-filename))\n    (princ (format \"Wrote %s\\n\" (f-join dest-dir json-filename)))\n    ))\n\n(provide 'elisp-index)\n;;; elisp-index.el ends here\n",
  "name": "elisp-index.el"
}