{
  "calls": [
    {
      "end": 972,
      "start": 965,
      "name": "require"
    },
    {
      "end": 988,
      "start": 981,
      "name": "require"
    },
    {
      "end": 1001,
      "start": 994,
      "name": "require"
    },
    {
      "end": 1017,
      "start": 1010,
      "name": "require"
    },
    {
      "end": 1165,
      "start": 1156,
      "name": "goto-char"
    },
    {
      "end": 1176,
      "start": 1167,
      "name": "point-min"
    },
    {
      "end": 1260,
      "start": 1255,
      "name": "point"
    },
    {
      "end": 1293,
      "start": 1289,
      "name": "read"
    },
    {
      "end": 1355,
      "start": 1351,
      "name": "-map"
    },
    {
      "end": 1361,
      "start": 1358,
      "name": "car"
    },
    {
      "end": 1463,
      "start": 1441,
      "name": "elisp-index--fun-calls"
    },
    {
      "end": 1502,
      "start": 1497,
      "name": "-each"
    },
    {
      "end": 1610,
      "start": 1609,
      "name": "+"
    },
    {
      "end": 1666,
      "start": 1665,
      "name": "+"
    },
    {
      "end": 1684,
      "start": 1678,
      "name": "length"
    },
    {
      "end": 1697,
      "start": 1686,
      "name": "symbol-name"
    },
    {
      "end": 1738,
      "start": 1734,
      "name": "memq"
    },
    {
      "end": 1852,
      "start": 1841,
      "name": "symbol-name"
    },
    {
      "end": 1972,
      "start": 1970,
      "name": "1-"
    },
    {
      "end": 2019,
      "start": 2017,
      "name": "1-"
    },
    {
      "end": 2080,
      "start": 2075,
      "name": "error"
    },
    {
      "end": 2100,
      "start": 2095,
      "name": "equal"
    },
    {
      "end": 2105,
      "start": 2102,
      "name": "car"
    },
    {
      "end": 2147,
      "start": 2139,
      "name": "nreverse"
    },
    {
      "end": 2219,
      "start": 2214,
      "name": "error"
    },
    {
      "end": 2308,
      "start": 2292,
      "name": "buffer-file-name"
    },
    {
      "end": 2316,
      "start": 2311,
      "name": "point"
    },
    {
      "end": 2462,
      "start": 2453,
      "name": "goto-char"
    },
    {
      "end": 2473,
      "start": 2464,
      "name": "point-min"
    },
    {
      "end": 2538,
      "start": 2534,
      "name": "read"
    },
    {
      "end": 2562,
      "start": 2557,
      "name": "-each"
    },
    {
      "end": 2690,
      "start": 2679,
      "name": "symbol-name"
    },
    {
      "end": 2755,
      "start": 2750,
      "name": "error"
    },
    {
      "end": 2775,
      "start": 2770,
      "name": "equal"
    },
    {
      "end": 2780,
      "start": 2777,
      "name": "car"
    },
    {
      "end": 2822,
      "start": 2814,
      "name": "nreverse"
    },
    {
      "end": 2894,
      "start": 2889,
      "name": "error"
    },
    {
      "end": 2983,
      "start": 2967,
      "name": "buffer-file-name"
    },
    {
      "end": 2991,
      "start": 2986,
      "name": "point"
    },
    {
      "end": 3150,
      "start": 3135,
      "name": "macroexpand-all"
    },
    {
      "end": 3186,
      "start": 3178,
      "name": "car-safe"
    },
    {
      "end": 3226,
      "start": 3218,
      "name": "car-safe"
    },
    {
      "end": 3236,
      "start": 3228,
      "name": "cdr-safe"
    },
    {
      "end": 3273,
      "start": 3265,
      "name": "car-safe"
    },
    {
      "end": 3283,
      "start": 3275,
      "name": "cdr-safe"
    },
    {
      "end": 3293,
      "start": 3285,
      "name": "cdr-safe"
    },
    {
      "end": 3330,
      "start": 3327,
      "name": "and"
    },
    {
      "end": 3334,
      "start": 3332,
      "name": "eq"
    },
    {
      "end": 3371,
      "start": 3369,
      "name": "eq"
    },
    {
      "end": 3381,
      "start": 3373,
      "name": "car-safe"
    },
    {
      "end": 3410,
      "start": 3407,
      "name": "nth"
    },
    {
      "end": 3457,
      "start": 3434,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 3481,
      "start": 3478,
      "name": "not"
    },
    {
      "end": 3488,
      "start": 3483,
      "name": "consp"
    },
    {
      "end": 3512,
      "start": 3510,
      "name": "eq"
    },
    {
      "end": 3517,
      "start": 3514,
      "name": "car"
    },
    {
      "end": 3548,
      "start": 3546,
      "name": "or"
    },
    {
      "end": 3552,
      "start": 3550,
      "name": "eq"
    },
    {
      "end": 3557,
      "start": 3554,
      "name": "car"
    },
    {
      "end": 3583,
      "start": 3581,
      "name": "eq"
    },
    {
      "end": 3588,
      "start": 3585,
      "name": "car"
    },
    {
      "end": 3634,
      "start": 3606,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 3639,
      "start": 3636,
      "name": "cdr"
    },
    {
      "end": 3655,
      "start": 3653,
      "name": "eq"
    },
    {
      "end": 3660,
      "start": 3657,
      "name": "car"
    },
    {
      "end": 3694,
      "start": 3687,
      "name": "symbolp"
    },
    {
      "end": 3762,
      "start": 3759,
      "name": "cdr"
    },
    {
      "end": 3842,
      "start": 3819,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 3865,
      "start": 3863,
      "name": "eq"
    },
    {
      "end": 3870,
      "start": 3867,
      "name": "car"
    },
    {
      "end": 3919,
      "start": 3891,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 3941,
      "start": 3939,
      "name": "eq"
    },
    {
      "end": 3946,
      "start": 3943,
      "name": "car"
    },
    {
      "end": 3992,
      "start": 3969,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 3997,
      "start": 3994,
      "name": "nth"
    },
    {
      "end": 4016,
      "start": 4014,
      "name": "eq"
    },
    {
      "end": 4021,
      "start": 4018,
      "name": "car"
    },
    {
      "end": 4059,
      "start": 4056,
      "name": "cdr"
    },
    {
      "end": 4120,
      "start": 4092,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4151,
      "start": 4149,
      "name": "eq"
    },
    {
      "end": 4156,
      "start": 4153,
      "name": "car"
    },
    {
      "end": 4201,
      "start": 4198,
      "name": "nth"
    },
    {
      "end": 4259,
      "start": 4253,
      "name": "append"
    },
    {
      "end": 4291,
      "start": 4268,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 4352,
      "start": 4324,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4357,
      "start": 4354,
      "name": "cdr"
    },
    {
      "end": 4391,
      "start": 4389,
      "name": "or"
    },
    {
      "end": 4395,
      "start": 4393,
      "name": "eq"
    },
    {
      "end": 4400,
      "start": 4397,
      "name": "car"
    },
    {
      "end": 4424,
      "start": 4422,
      "name": "eq"
    },
    {
      "end": 4429,
      "start": 4426,
      "name": "car"
    },
    {
      "end": 4464,
      "start": 4461,
      "name": "nth"
    },
    {
      "end": 4517,
      "start": 4511,
      "name": "append"
    },
    {
      "end": 4555,
      "start": 4550,
      "name": "consp"
    },
    {
      "end": 4599,
      "start": 4571,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4604,
      "start": 4601,
      "name": "cdr"
    },
    {
      "end": 4661,
      "start": 4633,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4690,
      "start": 4686,
      "name": "cons"
    },
    {
      "end": 4700,
      "start": 4697,
      "name": "car"
    },
    {
      "end": 4724,
      "start": 4719,
      "name": "consp"
    },
    {
      "end": 4729,
      "start": 4726,
      "name": "cdr"
    },
    {
      "end": 4773,
      "start": 4745,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4778,
      "start": 4775,
      "name": "cdr"
    },
    {
      "end": 4871,
      "start": 4848,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 5078,
      "start": 5063,
      "name": "macroexpand-all"
    },
    {
      "end": 5129,
      "start": 5106,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 5360,
      "start": 5356,
      "name": "memq"
    },
    {
      "end": 5526,
      "start": 5517,
      "name": "goto-char"
    },
    {
      "end": 5537,
      "start": 5528,
      "name": "point-min"
    },
    {
      "end": 5615,
      "start": 5611,
      "name": "read"
    },
    {
      "end": 5663,
      "start": 5653,
      "name": "scan-sexps"
    },
    {
      "end": 5670,
      "start": 5665,
      "name": "point"
    },
    {
      "end": 5733,
      "start": 5706,
      "name": "elisp-index--function-def-p"
    },
    {
      "end": 5771,
      "start": 5770,
      "name": "+"
    },
    {
      "end": 5789,
      "start": 5783,
      "name": "length"
    },
    {
      "end": 5802,
      "start": 5791,
      "name": "symbol-name"
    },
    {
      "end": 5907,
      "start": 5896,
      "name": "symbol-name"
    },
    {
      "end": 5951,
      "start": 5949,
      "name": "1-"
    },
    {
      "end": 5995,
      "start": 5993,
      "name": "1-"
    },
    {
      "end": 6047,
      "start": 6042,
      "name": "error"
    },
    {
      "end": 6067,
      "start": 6062,
      "name": "equal"
    },
    {
      "end": 6072,
      "start": 6069,
      "name": "car"
    },
    {
      "end": 6114,
      "start": 6106,
      "name": "nreverse"
    },
    {
      "end": 6186,
      "start": 6181,
      "name": "error"
    },
    {
      "end": 6275,
      "start": 6259,
      "name": "buffer-file-name"
    },
    {
      "end": 6283,
      "start": 6278,
      "name": "point"
    },
    {
      "end": 6364,
      "start": 6346,
      "name": "find-file-noselect"
    },
    {
      "end": 6465,
      "start": 6452,
      "name": "buffer-string"
    },
    {
      "end": 6486,
      "start": 6475,
      "name": "json-encode"
    },
    {
      "end": 6556,
      "start": 6534,
      "name": "elisp-index--functions"
    },
    {
      "end": 6611,
      "start": 6582,
      "name": "elisp-index--called-functions"
    },
    {
      "end": 6782,
      "start": 6772,
      "name": "f-filename"
    },
    {
      "end": 6821,
      "start": 6815,
      "name": "format"
    },
    {
      "end": 6841,
      "start": 6833,
      "name": "f-no-ext"
    },
    {
      "end": 6867,
      "start": 6860,
      "name": "f-write"
    },
    {
      "end": 6893,
      "start": 6874,
      "name": "elisp-index--encode"
    },
    {
      "end": 6924,
      "start": 6918,
      "name": "f-join"
    },
    {
      "end": 6960,
      "start": 6955,
      "name": "princ"
    },
    {
      "end": 6968,
      "start": 6962,
      "name": "format"
    },
    {
      "end": 6989,
      "start": 6983,
      "name": "f-join"
    },
    {
      "end": 7032,
      "start": 7025,
      "name": "provide"
    }
  ],
  "functions": [
    {
      "end": 1053,
      "start": 1024,
      "name": "elisp-index--called-functions"
    },
    {
      "end": 2350,
      "start": 2330,
      "name": "elisp-index--symbols"
    },
    {
      "end": 3032,
      "start": 3005,
      "name": "elisp-index--function-def-p"
    },
    {
      "end": 3450,
      "start": 3427,
      "name": "elisp-index--walk-calls"
    },
    {
      "end": 4820,
      "start": 4792,
      "name": "elisp-index--walk-calls-body"
    },
    {
      "end": 4906,
      "start": 4884,
      "name": "elisp-index--fun-calls"
    },
    {
      "end": 5414,
      "start": 5392,
      "name": "elisp-index--functions"
    },
    {
      "end": 6316,
      "start": 6297,
      "name": "elisp-index--encode"
    },
    {
      "end": 6641,
      "start": 6623,
      "name": "elisp-index--write"
    }
  ],
  "source": ";;; elisp-index.el --- Generate a list of all symbols in an elisp file  -*- lexical-binding: t; -*-\n\n;; Copyright (C) 2019  Wilfred Hughes\n;; Version: 0.1\n\n;; Author: Wilfred Hughes <me@wilfred.me.uk>\n;; Keywords: lisp\n;; Package-Requires: ((dash \"2.12.0\") (f \"0.19.0\") (ht \"2.2\"))\n\n;; This program is free software; you can redistribute it and/or modify\n;; it under the terms of the GNU General Public License as published by\n;; the Free Software Foundation, either version 3 of the License, or\n;; (at your option) any later version.\n\n;; This program is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n;; GNU General Public License for more details.\n\n;; You should have received a copy of the GNU General Public License\n;; along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n;;; Commentary:\n\n;; TODO\n\n;;; Code:\n\n(require 'dash)\n(require 'f)\n(require 'json)\n(require 'ht)\n\n(defun elisp-index--called-functions (buf)\n  (let ((read-with-symbol-positions t)\n        syms)\n    (with-current-buffer buf\n      (goto-char (point-min))\n      (condition-case err\n          (while t\n            (let* ((start-pos (point))\n                   (form (read buf))\n                   (form-syms\n                    (-map #'car read-symbol-positions-list))\n                   (fun-syms\n                    (elisp-index--fun-calls form form-syms)))\n              (-each read-symbol-positions-list\n                (-lambda ((sym . offset))\n                  (let* ((start-pos (+ start-pos offset))\n                         (end-pos (+ start-pos (length (symbol-name sym)))))\n                    (when (memq sym fun-syms)\n                      (push\n                       (ht\n                        (\"name\" (symbol-name sym))\n                        ;; Subtract 1 because emacs positions are 1-indexed.\n                        (\"start\" (1- start-pos))\n                        (\"end\" (1- end-pos)))\n                       syms)))))))\n        (error\n         (if (equal (car err) 'end-of-file)\n             (nreverse syms)\n           ;; Some unexpected error, propagate.\n           (error \"Unexpected error whilst reading %s position %s: %s\"\n                  (buffer-file-name) (point) err)))))))\n\n(defun elisp-index--symbols (buf)\n  (let ((read-with-symbol-positions t)\n        syms)\n    (with-current-buffer buf\n      (goto-char (point-min))\n      (condition-case err\n          (while t\n            (read buf)\n            (-each read-symbol-positions-list\n              (-lambda ((sym . pos))\n                (push\n                 (ht (\"name\" (symbol-name sym)) (\"position\" pos))\n                 syms))))\n        (error\n         (if (equal (car err) 'end-of-file)\n             (nreverse syms)\n           ;; Some unexpected error, propagate.\n           (error \"Unexpected error whilst reading %s position %s: %s\"\n                  (buffer-file-name) (point) err)))))))\n\n(defun elisp-index--function-def-p (form)\n  ;; TODO: return a list of all the functions defined in this form.\n  (let* ((expanded (macroexpand-all form))\n         (head-sym (car-safe expanded))\n         (fun-name (car-safe (cdr-safe expanded)))\n         (body (car-safe (cdr-safe (cdr-safe expanded)))))\n    (when\n        (and (eq head-sym 'defalias)\n             (eq (car-safe body) 'function))\n      (nth 1 fun-name))))\n\n(defun elisp-index--walk-calls (form)\n  (cond\n   ((not (consp form))\n    nil)\n   ((eq (car form) 'quote)\n    nil)\n   ((or (eq (car form) 'while)\n        (eq (car form) 'if))\n    (elisp-index--walk-calls-body (cdr form)))\n   ((eq (car form) 'function)\n    (if (symbolp (cadr form))\n        ;; For #'foo, assume it's a call.\n        (cdr form)\n      ;; For #'(lambda ...), just proceed.\n      (elisp-index--walk-calls (cadr form))))\n   ((eq (car form) 'lambda)\n    (elisp-index--walk-calls-body (cddr form)))\n   ((eq (car form) 'defalias)\n    (elisp-index--walk-calls (nth 2 form)))\n\n   ((eq (car form) 'cond)\n    (let* ((clauses (cdr form)))\n      (--mapcat\n       (elisp-index--walk-calls-body it)\n       clauses)))\n\n   ((eq (car form) 'condition-case)\n    (let* ((body (nth 2 form))\n           (clauses (cdddr form)))\n      (append\n       (elisp-index--walk-calls body)\n       (--mapcat\n        (elisp-index--walk-calls-body (cdr it))\n        clauses))))\n\n   ((or (eq (car form) 'let)\n        (eq (car form) 'let*))\n    (let ((head (nth 1 form))\n          (body (cddr form)))\n      (append\n       (--mapcat\n        (when (consp it)\n          (elisp-index--walk-calls-body (cdr it)))\n        head)\n       (elisp-index--walk-calls-body body))))\n   \n   (t\n    (cons\n     (car form)\n     (when (consp (cdr form))\n       (elisp-index--walk-calls-body (cdr form)))))))\n\n(defun elisp-index--walk-calls-body (body)\n  (--mapcat (elisp-index--walk-calls it) body))\n\n(defun elisp-index--fun-calls (form src-syms)\n  \"Return a list of all the functions called in FORM.\nIgnore function calls that are only introduced by macros.\"\n  (let* ((expanded (macroexpand-all form))\n         (fun-syms (elisp-index--walk-calls expanded)))\n    ;; All the function symbols that occurred in the source.\n    ;; TODO: this is confused by\n    ;; (condition-case nil nil (error (error \"F\")))\n    ;; and thinks there are two calls to error.\n    (--filter\n     (memq it src-syms)\n     fun-syms)))\n\n(defun elisp-index--functions (buf)\n  (let ((read-with-symbol-positions t)\n        funs)\n    (with-current-buffer buf\n      (goto-char (point-min))\n      (condition-case err\n          (while t\n            (let* ((form (read buf))\n                   (start-pos (scan-sexps (point) -1))\n                   (fun-sym (elisp-index--function-def-p form))\n                   (end-pos (+ start-pos (length (symbol-name fun-sym)))))\n              (when fun-sym\n                (push\n                 (ht (\"name\" (symbol-name fun-sym))\n                     (\"start\" (1- start-pos))\n                     (\"end\" (1- end-pos)))\n                 funs))))\n        (error\n         (if (equal (car err) 'end-of-file)\n             (nreverse funs)\n           ;; Some unexpected error, propagate.\n           (error \"Unexpected error whilst reading %s position %s: %s\"\n                  (buffer-file-name) (point) err)))))))\n\n(defun elisp-index--encode (path)\n  (let* ((buf (find-file-noselect path))\n         (json-encoding-pretty-print t)\n         (src (with-current-buffer buf (buffer-string))))\n    (json-encode\n     (ht (\"source\" src)\n         (\"functions\" (elisp-index--functions buf))\n         (\"calls\" (elisp-index--called-functions buf))))))\n\n(defun elisp-index--write (path dest-dir)\n  \"Read the elisp at PATH, and write a copy of the file and JSON\nsummary to DEST-DIR.\"\n  (let* ((filename (f-filename path))\n         (json-filename (format \"%s.json\" (f-no-ext filename))))\n    (f-write\n     (elisp-index--encode path)\n     'utf-8\n     (f-join dest-dir json-filename))\n    (princ (format \"Wrote %s\\n\" (f-join dest-dir json-filename)))\n    ))\n\n(provide 'elisp-index)\n;;; elisp-index.el ends here\n"
}